- section: Introduction
- p: >
    This module provides a way to easily generate node CLI modules, eventually using files documented with [documentation.js](http://documentation.js.org/).
- section: Get started
- title: Create and use a simple CLI
- p: >
    First, implement one or more commands with documentation using the following pattern (one file for each command):
- js: >
    // path/to/command/file.js


    /**
     * @name my-cli-command
     */
    function cliCommand({
        option,
        option2 = 'default-value'
    } = {}){
        // do some asynchronous stuffs
    }


    module.exports = cliCommand
- p: >
    Now, you have to create a cli function using cleanquirer:
- js: >
    // path/to/cli-function.js


    const path = require('path');


    const cleanquirer = require('cleanquirer');


    module.exports = cleanquirer({
        name: 'cli-name',
        commands: [
            path.join(__dirname, 'path/to/command/file.js'),
            path.join(__dirname, 'path/to/other/command/file.js'),
            path.join(__dirname, 'glob/matching/multiple/commands/file/*.js')
        ]
    })
- p: >
    You can use the exported function to call methods of the cli api directly in javascript
- js: >
    // path/to/a/file.js


    const myCli = require('path/to/cli-function.js');


    myCli(['my-cli-command']).then(()=>{
        // do stuffs after the command was executed
    })
- p: >
    Then you just have to create a bin file which will do the link between myCli and the terminal input
- js: >
    path/to/bin/myCli

    #!/usr/bin/env node


    'use strict';


    require('path/to/cli-function.js')(process.argv.slice(2));
- p: >
    And fill the bin field in your module package.json
- cli: >
    // package.json

    "bin": {
      "cli-name": "path/to/bin/myCli"
    }
- section: Documentation